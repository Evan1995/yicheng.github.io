<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hexo with VSCode]]></title>
    <url>%2F2019%2F07%2FHexo-with-VSCode%2F</url>
    <content type="text"><![CDATA[介绍一下怎么在vscode中预览hexo的图片~ 本文提到的方法有两个前提：1.适用于把所有素材放到images下时；2.适用于使用NexT主题时开启了post_asset_folder功能的请参考reference的链接和本文修改。使用其他主题可以参考本文修改。 Paste Image首先需要安装插件Paste Image，这个插件是用来粘贴图片的，直接把图片复制，然后在vscode中粘贴即可，十分方便。 需要注意的是，当粘贴的时候，只需要将文件名用鼠标圈住，然后再粘贴，就可以把圈住的文件名当作粘贴后的文件名，十分方便。具体操作可见插件说明页。 安装好后在当前项目的.vscode/setting.json中写上以下配置项，这些配置项只会影响当前项目，不推荐写入系统配置项。 12345678&#123; "pasteImage.namePrefix": "$&#123;currentFileNameWithoutExt&#125;-", "pasteImage.path": "$&#123;projectRoot&#125;/source/images", "pasteImage.basePath": "$&#123;projectRoot&#125;/source", "pasteImage.forceUnixStyleSeparator": true, "pasteImage.prefix": "/", "pasteImage.insertPattern": "&#123;% fi $&#123;imageFilePath&#125;,,, %&#125;"&#125; 解释一下，意思是使用(当前文件名-圈住的名字)当前缀，然后粘贴到/images/XXX下。上个图一看： 为什么要加4个逗号，因为使用的是NexT的图片解析方式，这种解析方式只有最后一个字段是控制图片宽度的。可以搜索前一篇关于Hexo的文章看一下两者的区别。如果使用其他theme的同学可以只把&quot;pasteImage.insertPattern&quot;这一项改一下，改成对应的图片解析格式即可。 Markdown Preview Enhanced这个插件是用来预览的，支持自定义扩展，安装好后ctrl+shift+P输入Markdown Preview Enhanced: Extend Parser，修改对应部分：123456789onWillParseMarkdown: function(markdown) &#123; return new Promise((resolve, reject)=&gt; &#123; markdown = markdown.replace( /\&#123;%\s*fi\s*([\w/\.-]*)\s*,.*,.*,.*%\&#125;/g, (whole, content) =&gt; (`&lt;center&gt;&lt;img src="../$&#123;content&#125;" width="300" /&gt;&lt;/center&gt;`) ) return resolve(markdown) &#125;) &#125;, 可以看到的是，它只是使用正则，把刚才粘贴进来的格式，解析成了html显示图片的格式，宽度使用固定值300，这样即可在预览里看到刚才粘贴的图片。文件名支持.，-，数字，英文字符。这个预览的时候只是用来看一下粘贴好了没，而真正发布的时候使用的参数是md文件里写到的参数。 在下比较菜，这里可以使用上判断语句增加其他格式的解析，也可以把宽度值也从正则里解析出来，如果有做了这一部分的同学欢迎给我发邮件~ 在这里再推荐一个Markdown All in One，功能也很强大，比如直接插入链接等，很实用。 reference《利用vscode插件与git hook提升hexo编写部署体验》link菜鸟工具，在线匹配正则，如果要修改正则的话可以用这个看看 link]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test]]></title>
    <url>%2F2019%2F07%2Ftest%2F</url>
    <content type="text"><![CDATA[Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy. David LevithanWide Awake xxx content content xxxx lo log f(x)]]></content>
      <categories>
        <category>P1</category>
        <category>P2</category>
      </categories>
      <tags>
        <tag>XXX</tag>
        <tag>VVV</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Build a Hexo Blog]]></title>
    <url>%2F2019%2F07%2FBuild-a-Hexo-Blog%2F</url>
    <content type="text"><![CDATA[记录一下慢慢接触Hexo中学习到的知识吧，做一个梳理。 准备工作Node.js使用的是Nodejs 10，从官网下载的时候发现Nodejs 10的支持时间还很长，所以就用的这个，第一个接触这个东西，不是很懂。 受制于用啥软件都要用最新版的强迫症思想，去查了查怎么升级Nodejs，然后node版本如何升级中提到了一句话： 爬坑后的结论：window系统升级node只能到node官网下载window安装包来覆盖之前的node。 所以安安静静的用吧，先别想着升级了，node -v查看版本，我的版本是v10.15.3。 npm下载了nodejs之后就可以用npm管理包了，同样是第一次用。类似Python的pip，安装包的。但是和pip不太一样的是，可以选择把包装在项目文件里还是装在全局，所以在安装时就会有点迷糊。 npm install xxx -g 安装在全局，可能就安装到了node的安装目录，和pip一样，安装好的项目可以全局使用，比如直接在命令行里用。如果不加-g参数就是安装到了当前项目，即在当前项目下新建一个node_modules文件夹，然后把包装进去，可以在项目代码里引入。所以安装的时候一定要注意安装位置。还可以指定-save，意思是将模块安装到项目目录下，并在package文件的dependencies节点写入依赖。关于他们的具体区别可以看这篇文章，就不多说了。有了这些知识，去看Hexo的官网的相关信息就不会迷糊了。 使用npm install npm -g命令可以方便的升级npm，这样我心里舒服多了。npm list -g --depth 0查看全局安装包，npm outdated -g --depth=0查看全局能升级的。同理，不加-g就是看当前项目的咯。npm list xxx查看某个包。 其他的用法还有uninstall/ls/update/search，详见runoob Hexo安装过程详见官网，有了上边的准备知识就不难了。安装完成后有如下几个部分： _config.yml 网站配置信息，这里边可以设置的不多，theme的设置项非常多 package.json 包信息，使用的包用了-save在这里都会有记载，所以安装包的时候只需要把使用-save，那么把当前项目写作分支同步到git后，更换设备直接安装这里边的项目即可 scaffolds 模板文件，其实就是md文件头模板吧~ source 新建的文章都在这里，还有其他资源，比如images themes 下载的主题 node_modules 安装在当前项目的包都在这里，这个在gitignore里不会同步这个文件，因为换了设备的时候使用npm重新安装即可 .gitignore 这个应该是下载hexo的时候hexo的git信息，有个问题是怎么利用这个给项目备份，换电脑了还能把这些文件恢复回来，是个问题，还在研究 从官网的配置页面很容易就能修改_config.yml文件。 命令hexo new [layout] &lt;title&gt; 新建一个文章~标题文章过长记得加引号，支持中文。 hexo generate/g 生成静态文件，可以直接部署-d/--deploy或者监视-w/--watch，监视的意思就是边改边生成静态文件~也可以用hexo server/s的形式，边改边看。 hexo deploy/d 部署，-g/--generate同时生成静态文件。g -d和d -g是一样的 hexo clean 清除缓存，清除缓存文件db.json和已生成的静态文件public hexo list &lt;type&gt; 可以查看网站的各种信息，可用的参数有page, post, route, tag, category，很好~ 写作布局有三种默认布局，post会发一个文章到博客的Archives类别里；page会新建一个标签页，和Archives是一个级别的，需要去主题页面加入生成的页面，才能正常解析，例如可以添加About me页面；draft是草稿。可以定义很多布局，比如一个categories就有一个布局，这样每次新写文章的时候直接new对应的布局就行了。据我尝试，新建的布局都会被放到_post目录下当作文章看待。 布局中的title对应着正文中文章名称，而md文件的名称则对应着url解析时对应的文章名称 草稿这个模式应该还挺有用的，hexo publish [layout] &lt;title&gt;可以发布写好的草稿--draft可以预览草稿 分类可以使用两种分类方式，一个是categories，另外一个是tags，使用方式是有两种：12345tags/categories:- t1- t2tags/categories: [t1, t2] 区别是categories包含层级关系，tags则全是并列关系~ 正文中的标签插件这一类是hexo解析的特殊格式，可以快速在正文中插入所需的东西。算是给markdown做了个扩展吧，感觉这部分比较好。问题是很多编辑器没有办法预览这个部分，所以最好以server的形式看，也可以修改vscode中的配置信息使其兼容图片的预览。所以我更喜欢用原生markdown，除了图片可以用这个外，因为可以直接用插件预览。（vscode预览详见下一篇文章） 引用块123&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;content&#123;% endblockquote %&#125; 别名quote，代替了&gt;的引用形式，增加了一些解释字段，内容更加丰富。 One meets its destiny on the road he takes to avoid it. Kung Fu Pandadouban 代码块123&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;code snippet&#123;% endcodeblock %&#125; 别名code，相比原生代码块，增加了对引用网址等信息的解析 图片1&#123;% img [class names] /path/to/image [width] [height] [title text [alt text]] %&#125; 这个class names还是没搞懂啊，应该是对应的css文件，直接修改图片属性。路径是source目录下的图片。其实我还是更喜欢使用source/images的形式传入图片，然后![](/images/image.jpg)引入图片，问题是预览的时候根路径是当前路径，难以预览。 可以使用post_asset_folder: true设置为一个文章对应一个文件夹，这样会导致文件夹太多了，作为一个强迫症看着心里难受，还是扔一个文件夹好。在这个模式下，官方推荐使用{% asset_img name image %}方式引入图片，不会在预览的时候消失。这个命令会自动在同名文件夹下读取这个文件夹的资源了。我没这么做哦。 Link1&#123;% link text url [external] [title] %&#125; 它和默认的Link相比就是链接text之间允许空格 除了上述命令外，还有：加入一个iframe，就是嵌入一个子网页；source中的代码文件；Youtube视频；引用文章或文章中的资源等。 推送到Githubhexo clean &amp;&amp; hexo deploy，这个好像不用-g参数也会重新生成。记得推送到master分支啊，尝试推送到别的分支github.io并不会更新，这个推送了部署分支 Tip个人感觉可以直接使用下载时的gitignore，然后把项目推送到写作分支，然后再重新部署的只需要git clone下来项目文件，然后用npm install即可，因为在使用hexo建站的时候就是类似的流程，而所需的model在安装时都被记录下来了，待尝试 NexT使用了NexT后，会重新解析所有布局，包括图片和quote。 1git clone https://github.com/theme-next/hexo-theme-next themes/next 目录下直接执行这个下载最新的，好处是以后可以直接用git更新~ git pull就可以更新这个主题，但是可能会遇到冲突，需要懂一点git知识，才能合并。 Theme SettingNexT的官网的Theme setting页面做得很好，跟配置页面几乎同步在介绍各种设置的作用。 修改favicon可以修改浏览器标题前的那个小图标~ 修改avatar可以放上个人的照片，等回头我拍个好的照片就放上去。 关于许可协议的介绍可以看看这个，添加许可协议 mobile_layout_economy: true 可以设置自适应窄屏 logo就是在上边添加一个logo，不能修改其他的，可能没什么用。 各种小图标来自Font Awesom v4.7，可以去这里看，然后把icon的名字记下来就行了，比如修改footer图标，我用的这个是bug。 有三种方式控制首页文章的长度，可以混合用，效果更好哦 第一种是可以设置description字段在每篇文章的开头 第二种是在文章任意部分添加&lt;!-- more --&gt;，就会从这里截断，这是Hexo推荐的，比如有些博主喜欢每个文章的预览都是一个图片，就可以用这个，开头放上图片，然后截断 第三种是在设置里设置auto_excerpt，控制字数进行截断，我主要使用的是这个 代码风格改成了night，觉得这个比较好看，其他的没有改，别的还是默认好看 busuanzi_count.enable显示访客量，这是框架自带的，不用接入什么api 搜索功能棒，很简单就可以添加本地搜索 Math数学公式的支持，按照官网的要求，先卸载旧的marked，然后安装新的渲染引擎，我用的是hexo-renderer-kramed。然后只需设置math.enable=true就行，因为默认已经写了cnd加速。默认是需要在文章的开头设置mathjax: true才会对当前文章进行math渲染，也可以设置为对每一个文章都渲染，显然没啥必要。 \begin{equation} \begin{aligned} a &= b + c \\ &= d + e + f + g \\ &= h + i \end{aligned} \end{equation}标签插件NexT也提供了一套标签插件，可以看看和Hexo的哪个好用啊~这个图片突然就显示title了，不知道是我的渲染方式发生了变化还是因为引入了Fancybox。 图片的表达好像差不多，就是这个标签不带边框。note的表达更加多样性，还可以在note中使用###写入标题，最多支持三级标题，使用四级标题的时候TOC解析会出问题。对note进行如下设置：style: modern使用新式css，icons: true使用提示的图标。label就是给这段文字加个颜色。class很通用，都是这几个类别。使用了NexT后，无论哪种形式的Link都会在后边加一个小图标，很nice。Tab和Button和PDF等不常用，没写~ 123456789101112&#123;% fi /url, [alt], [title], [size] %&#125;&#123;% note [class] [no-icon] %&#125;Any content (support inline tags too.io).&#123;% endnote %&#125;[class] : default | primary | success | info | warning | danger.[no-icon] : Disable icon in note.&#123;% label [class]@Text %&#125;[class] : default | primary | success | info | warning | danger.&#123;% video url %&#125; External Libraries全部使用cdn加速Fancybox: 对图片进行jq优化，支持大图，可以点开图片后左右切换图片 ✔bookmark: 支持记录当前阅读位置，在浏览器左上角显示一个小书签，下次阅读的时候可以继续看reading_progress: 在浏览器顶端显示阅读位置 ✔Progress bar: 对Ajax请求优化 ✔FastClick: 优化点击动作Jquery Lazyload: 懒加载Canvas Nest: 背景jq，点点点点点的这个背景 ✔Canvas Ribbon: 炫酷的条带背景，每次点击鼠标就会换]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
